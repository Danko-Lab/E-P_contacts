#!/bin/bash

contacts=$1 # contact (pairs) file output from distiler filtered using: zcat perfix.pairs.gz | awk 'BEGIN {OFS = "\t"} ; {if ($1 == "." && $2 == $4 && $9 >= 30 && $10 >= 30) {print $2, $3, $4, $5, $6, $7, $8, $9, $10}}' > perfix.nodups_30_intra.pairs
baits=$2 # bed1 - a bed file with all the regions you want to use as baits (the script will center the heatmap over the center of the regions)
preys=$3 # bed2 file of regions of interest that you want to use as prey (the script will center the heatmap over the center of the regions)
minDis=$4 # range start - the minimal distance between region centers to screen for ***minDis needs to be >= 2*(winSize + max(frarment sizes in the library))
maxDis=$5 # range end - the maximal distance between region centers to screen for
winSize=$6 # window half size of region to screen for contacts per region with other region in the list (integer)
pixNum=$7 # half the number of pixels to devide the window to (integer). The resulting pixels will represent a window-size/number-of-pixels bps
OutputDir=$8 # the directory in which work will be done and output will appear

mkdir  -p ${OutputDir}

wait

wait_a_second() {
  joblist=($(jobs -p))
    while (( ${#joblist[*]} >= 60 ))
      do
      sleep 1
      joblist=($(jobs -p))
  done
}


wait

# Declare an array of chromosomes - could be change according to species
declare -a chroms=("chr1" "chr2" "chr3" "chr4" "chr5" "chr6" "chr7" "chr8" "chr9" "chr10" "chr11" "chr12" "chr13" "chr14" "chr15" "chr16" "chr17" "chr18" "chr19" "chr20" "chr21" "chr22" "chrX" "chrY")
#declare -a chroms=("chr1" "chr2" "chr3" "chr4" "chr5" "chr6" "chr7" "chr8" "chr9" "chr10" "chr11" "chr12" "chr13" "chr14" "chr15" "chr16" "chr17" "chr18" "chr19" "chrX" "chrY")


wait

mkdir ${OutputDir}/contacts_shifted_by_chrom

wait

# Iterate the chromosomes and shift the 5' reads positions to ~mid-nucleosome
for chr in ${chroms[@]}; do 
    zcat $contacts | awk -v c=$chr 'BEGIN {OFS = "\t"} ; {if ($5 == "+" && $6 == "+" && $1 == c) {print $1, $2 + 75, $3, $4 + 75, $5, $6, $7, $8, $9} else if ($5 == "+" && $6 == "-" && $1 == c) {print $1, $2 + 75, $3, $4 - 75, $5, $6, $7, $8, $9} else if ($5 == "-" && $6 == "-" && $1 == c) {print $1, $2 - 75, $3, $4 - 75, $5, $6, $7, $8, $9} else if ($5 == "-" && $6 == "+" && $1 == c) {print $1, $2 - 75, $3, $4 + 75, $5, $6, $7, $8, $9}}' > ${OutputDir}/contacts_shifted_by_chrom/${chr}.shifted &
    wait_a_second
done

wait

mkdir ${OutputDir}/baits_by_chrom

wait

# Iterate the chromosomes and make chrom-specific baits file
for chr in ${chroms[@]}; do
    cat $baits | awk -v c=$chr 'BEGIN {OFS = "\t"} ; {if ($1 == c) {print $1, $2, $3, $4, int(($2 + $3) / 2)}}' > ${OutputDir}/baits_by_chrom/${chr}_baits.bed &
    wait_a_second
done

wait

mkdir ${OutputDir}/preys_by_chrom
 
# Iterate the chromosomes and make chrom-specific preys file
for chr in ${chroms[@]}; do
    cat $preys | awk -v c=$chr 'BEGIN {OFS = "\t"} ; {if ($1 == c) {print $1, $2, $3, $4, int(($2 + $3) / 2)}}' > ${OutputDir}/preys_by_chrom/${chr}_preys.bed &
    wait_a_second
done

wait

# for every bait, generate a sub-file of TREs with the bait and the prays around it, as defined by minDis and maxDis

mkdir ${OutputDir}/preys_IN_baits_folder

for chr in ${chroms[@]}; do
    while read chrom start end strand center; do
        cat ${OutputDir}/preys_by_chrom/${chr}_preys.bed | awk -v c=$center -v s=$minDis -v e=$maxDis 'BEGIN {OFS="\t"} ; {if (((c - e <= $5) && ($5 <= c - s)) || ((c + s <= $5) && ($5 <= c + e))) {print $0}}' > ${OutputDir}/preys_IN_baits_folder/${chr}_${center}.bed &
        wait_a_second
    done < ${OutputDir}/baits_by_chrom/${chr}_baits.bed
done

wait

#generate a temp per-locus contact files directory with all contacts that has one side within the search window for each locus
mkdir ${OutputDir}/baits_IN_contacts_folder

for chr in ${chroms[@]}; do
    while read chrom start end strand center; do
        cat ${OutputDir}/contacts_shifted_by_chrom/${chr}.shifted | awk -v c=$center -v s=$minDis -v w=$winSize 'BEGIN{OFS="\t"} ; {if ((((c - w <= $2) && ($2 <= c + w)) && (sqrt(($4 - $2)^2) > s -w)) || (((c - w <= $4) && ($4 <= c + w)) && (sqrt(($4 - $2)^2) > s -w))) {print $0}}' > ${OutputDir}/baits_IN_contacts_folder/${chr}_${center}.bed &
        echo $chrom $center
        wait_a_second
    done < ${OutputDir}/baits_by_chrom/${chr}_baits.bed
done

wait

mkdir ${OutputDir}/per_bait_matrices_folder

for chr in ${chroms[@]}; do
    while read chrom start end strand center; do
        python /fs/cbsubscb17/storage/project-scratch/gb446/Aggregate_analysis/MicroC_Stranded_Aggregation_pipeline_get_bait_matrix.py ${OutputDir}/baits_IN_contacts_folder/${chr}_${center}.bed $center $strand ${OutputDir}/preys_IN_baits_folder/${chr}_${center}.bed $winSize $pixNum ${OutputDir}/per_bait_matrices_folder/${chr}_${center}.csv &
        echo $chrom $center
        wait_a_second
    done < ${OutputDir}/baits_by_chrom/${chr}_baits.bed
done

wait

python /fs/cbsubscb17/storage/project-scratch/gb446/Aggregate_analysis/MicroC_Stranded_Aggregation_pipeline_get_aggregated_matrix.py ${OutputDir}/per_bait_matrices_folder/ $winSize $pixNum ${OutputDir}/AggMat.csv ${OutputDir}/AggHeatmap.svg 

