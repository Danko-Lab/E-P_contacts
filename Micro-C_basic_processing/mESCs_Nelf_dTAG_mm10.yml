#########################################
# THIS IS A TYPICAL project.yml TEMPLATE
# most of the settings present here
# are GO for mapping production data
# but nonetheless user must consider
# carefully every presented option
#########################################

#########################################
# When commmenting parameters out, make sure 
# that each section still has at least one 
# uncommented parameter, otherwise it 
# will not get properly parsed.
#########################################


    
#######################################
# provide paths to your raw input data (fastq-s):
#######################################
# Fastqs can be provided as:
# -- a pairs of relative/absolute paths
# -- sra:<SRA_NUMBER>, optionally followed by the indices of the first and
# the last entry in the SRA in the form of "?start=<first>&end=<last>
input:
    raw_reads_paths:
        # substitute the location of your fastq files:
        # an example of a 2-lane library:
        # mapped reads from both lanes will be pulled togheter
        # and deduplicated as one.
        0_A1:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_0_A1_CKDL210027641-1a-19_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_0_A1_CKDL210027641-1a-19_H7VJWDSX3_L2_2.fq.gz
        0_A2:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_0_A2_CKDL210027641-1a-29_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_0_A2_CKDL210027641-1a-29_H7VJWDSX3_L2_2.fq.gz
        0_B1:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_0_B1_CKDL210027641-1a-20_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_0_B1_CKDL210027641-1a-20_H7VJWDSX3_L2_2.fq.gz
        0_B2:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_0_B2_CKDL210027641-1a-30_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_0_B2_CKDL210027641-1a-30_H7VJWDSX3_L2_2.fq.gz

        30_min_A1:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_30min_A1_CKDL210027641-1a-21_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_30min_A1_CKDL210027641-1a-21_H7VJWDSX3_L2_2.fq.gz
        30_min_A2:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_30min_A2_CKDL210027641-1a-31_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_30min_A2_CKDL210027641-1a-31_H7VJWDSX3_L2_2.fq.gz
        30_min_B1:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_30min_B1_CKDL210027641-1a-22_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_30min_B1_CKDL210027641-1a-22_H7VJWDSX3_L2_2.fq.gz
        30_min_B2:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_30min_B2_CKDL210027641-1a-32_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_30min_B2_CKDL210027641-1a-32_H7VJWDSX3_L2_2.fq.gz

        60_min_A1:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_60min_A1_CKDL210027641-1a-23_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_60min_A1_CKDL210027641-1a-23_H7VJWDSX3_L2_2.fq.gz
        60_min_A2:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_60min_A2_CKDL210027641-1a-33_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_60min_A2_CKDL210027641-1a-33_H7VJWDSX3_L2_2.fq.gz
        60_min_B1:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_60min_B1_CKDL210027641-1a-24_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_60min_B1_CKDL210027641-1a-24_H7VJWDSX3_L2_2.fq.gz
        60_min_B2:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_60min_B2_CKDL210027641-1a-34_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_60min_B2_CKDL210027641-1a-34_H7VJWDSX3_L2_2.fq.gz

        8h_PW_A1:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_8hPW_A1_CKDL210027641-1a-25_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_8hPW_A1_CKDL210027641-1a-25_H7VJWDSX3_L2_2.fq.gz
        8h_PW_A2:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_8hPW_A2_CKDL210027641-1a-35_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_8hPW_A2_CKDL210027641-1a-35_H7VJWDSX3_L2_2.fq.gz
        8h_PW_B1:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_8hPW_B1_CKDL210027641-1a-26_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_8hPW_B1_CKDL210027641-1a-26_H7VJWDSX3_L2_2.fq.gz
        8h_PW_B2:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_8hPW_B2_CKDL210027641-1a-36_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_8hPW_B2_CKDL210027641-1a-36_H7VJWDSX3_L2_2.fq.gz

        24h_PW_A1:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_24hPW_A1_CKDL210027641-1a-27_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_24hPW_A1_CKDL210027641-1a-27_H7VJWDSX3_L2_2.fq.gz
        24h_PW_A2:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_24hPW_A2_CKDL210027641-1a-37_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_24hPW_A2_CKDL210027641-1a-37_H7VJWDSX3_L2_2.fq.gz
        24h_PW_B1:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_24hPW_B1_CKDL210027641-1a-28_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_24hPW_B1_CKDL210027641-1a-28_H7VJWDSX3_L2_2.fq.gz
        24h_PW_B2:
            lane1:
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_24hPW_B2_CKDL210027641-1a-38_H7VJWDSX3_L2_1.fq.gz
                - /workdir/gb446/Nelf_dTAG/NELFdTAG_24hPW_B2_CKDL210027641-1a-38_H7VJWDSX3_L2_2.fq.gz

    # independent libraries can be combined together
    # on the level of binned-data (.cool files)
    # describe your groupings of choice here:
    library_groups:
        0_A:
            - 0_A1
            - 0_A2
        0_B:
            - 0_B1
            - 0_B2
        30_min_A:
            - 30_min_A1
            - 30_min_A2
        30_min_B:
            - 30_min_B1
            - 30_min_B2
        60_min_A:
            - 60_min_A1
            - 60_min_A2
        60_min_B:
            - 60_min_B1
            - 60_min_B2
        8h_PW_A:
            - 8h_PW_A1
            - 8h_PW_A2
        8h_PW_B:
            - 8h_PW_B1
            - 8h_PW_B2
        24h_PW_A:
            - 24h_PW_A1
            - 24h_PW_A2
        24h_PW_B:
            - 24h_PW_B1
            - 24h_PW_B2
        0_combined:
            - 0_A1
            - 0_A2
            - 0_B1
            - 0_B2
        30_min_combined:
            - 30_min_A1
            - 30_min_A2
            - 30_min_B1
            - 30_min_B2
        60_min_combined:
            - 60_min_A1
            - 60_min_A2
            - 60_min_B1
            - 60_min_B2
        8h_PW_combined:
            - 8h_PW_A1
            - 8h_PW_A2
            - 8h_PW_B1
            - 8h_PW_B2
        24h_PW_combined:
            - 24h_PW_A1
            - 24h_PW_A2
            - 24h_PW_B1
            - 24h_PW_B2




    # Truncate input fastqs to a small number of reads (e.g. 10000) for
    # semi-dry test runs.
    # NOTE: when the inputs are specified as an SRA number, only this number of
    # reads is downloaded!
#    truncate_fastq_reads: 0

    # Specify a reference genome to align sequenced reads.
    # Provide the genome assembly name, a wildcard path to the BWA index files
    # of the reference genome, and a tab-separated table with contig sizes 
    # (known as "chrom.sizes"). The latter is used to specify the subset and the 
    # order of contigs in a resulting contact map.
    genome:
        assembly_name: 'mm10'
        bwa_index_wildcard_path: '/workdir/gb446/Nelf_dTAG/genome.fasta.*'
        chrom_sizes_path: '/workdir/gb446/Nelf_dTAG/chrominfo.txt'

# Choose if you want to do FastQC of the input files:
do_fastqc: True

# Control how reads are mapped to the reference genomes.
map:
    # If 'chunksize' is non-zero, each input file gets split into multiple chunks,
    # each mapped separately. Useful for mapping on clusters with many 
    # relatively weak nodes.
    # The optimal chunk size is defined by the balance between mapping and merging.
    # Smaller chunks (~30M) are better for clusters with many weak nodes,
    # however, having >~10 chunks per run slow down merging.
    #chunksize: 0
    
    # Specify extra BWA mapping options.
    mapping_options: '-v 3'

# Control how read alignments are converted ('parsed') into Hi-C pairs.
parse:
    # If 'make_pairsam' is True, parsed Hi-C pairs will store complete 
    # alignment records in the SAM format (the resulting hybrid between the
    # .pairs and .sam formats is called '.pairsam'). Such files can be useful for
    # thorough investigation of Hi-C data. Downstream of parsing, pairsams
    # are split into .pairs and .bam, and .bam alignments are tagged with 
    # Hi-C related information. 'make_pairsam' roughly doubles the storage 
    # and I/O requirements and should be used only when absolutely needed.
    # NOTE: when 'make_pairsam' is False, the initial output of parsing is still
    # called '.pairsam' despite missing SAM alignments, for technical reasons.
    make_pairsam: False
    # When 'make_pairsam' is True, enabling 'drop_seq' erases sequences and
    # Phred scores from the SAM alignments in .pairsam and .bam output files.
    # Enable to make lightweight .pairsam/.bam output.
    # NOTE: when 'make_pairsam' is False, 'drop_seq' is ignored.
    drop_seq: False

    # Enable 'drop_readid' to drop readID from .pairs files to create
    # lightweight .pairs files
    # NOTE: does not affect alignment records in the .pairsam files and
    # subsequently .bam files after .apirsam splitting.
    drop_readid: True


    
    # When 'keep_unparsed_bams' is True, distiller preserves the _immediate_
    # output of bwa in a .bam format. Could be used as a faster alternative 
    # to 'make_pairsam' when alignments are needed, but tagging them with Hi-C
    # related information is not necessary.
    keep_unparsed_bams: False
    
    # Pass extra options to pairtools parse, on top of the ones specified by
    # flags 'make_pairsam', 'drop_readid', 'drop_seq'. The default value 
    # enables storing MAPQ scores in the .pairsam/.pairs output, which are
    # used later for filtering/binning.
    parsing_options: '--add-columns mapq'

# Control how PCR/optical duplicates are detected in the data.
dedup:
    # PCR/optical duplicates are detected as Hi-C pairs with matching locations
    # on both sides. 'max_mismatch_bp' controls the maximal allowed mismatch in 
    # mapped locations on either side for two pairs to be still considered as
    # duplicates.
    max_mismatch_bp: 1

# Control how Hi-C pairs are binned into contact maps, stored in .cool files.
bin:
    # Specify which resolutions should be included in the multi-resolution .cool file.
    # The lowest (base) resolution _must_ be the common denominator of all other
    # resolutions.
    resolutions:
        - 10000000
        - 5000000
        - 2500000
        - 1000000
        - 500000
        - 250000
        - 100000
        - 50000
        - 25000
        - 10000
        - 5000
        - 2000
        - 1000
        - 200
    # Specify if the multi-resolution .cool output siles should be balanced.
    balance: true

    # Pass additional parameters to cooler balance:
    balance_options: ''

    # Specify additional filters applied to pairs during binning.
    # Multiple filters are allowed; for each filter, all pairs satisfying the
    # given filter expression will be binned into a separate cooler.
    # Filters are specified using the following syntax:
    # {filter_name}: '{a valid Python expression}'
    filters: 
        no_filter: ''
        mapq_30: '(mapq1>=30) and (mapq2>=30)'

########################################
# folder structure for storing results
########################################
output:
    dirs:
        processed_fastqs: '/home/gb446/Nelf_dTAG/processed_fastqs/'
        mapped_parsed_sorted_chunks: '/home/gb446/Nelf_dTAG/mapped_parsed_sorted_chunks'
        fastqc: '/home/gb446/Nelf_dTAG/fastqc/'
        pairs_library: '/home/gb446/Nelf_dTAG/pairs_library'
        coolers_library: '/home/gb446/Nelf_dTAG/coolers_library/'
        coolers_library_group: '/home/gb446/Nelf_dTAG/coolers_library_group/'
        stats_library_group: '/home/gb446/Nelf_dTAG/stats_library_group/'

