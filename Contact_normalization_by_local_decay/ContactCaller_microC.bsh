#!/bin/bash

if [ "$#" -lt 4 ]; then
  echo ""
  echo "USAGE: bash HiC_ContactCaller_microC.bsh peakFile tssFile conFile outputPath [CPU.threads] [DIST] [CAP]"
  echo "peakFile     -- File of "bait" peaks(promoters + enhancers +...) to analyze (format: Chromosome <\t> bait-center-position)."
  echo "tssFile      -- File of "prey" TSSs(promoters) to analyze (format: Chromosome <\t> prey-center-position)."
  echo "conFile      -- Contact file based on distiller output excluding the header and first column."
  echo "outputPath   -- Path to output file."
  echo "CPU          --[optional, default=30] indicating how many CPU cores can be used."
  echo "DIST         --[optional, default=1000000] Half size of "prey" search window around "bait" position."
  echo "CAP          --[optional, default=2000] Half size of "bait" and "prey" contact capture window."
  echo ""
  exit 1
fi

export LD_LIBRARY_PATH=/programs/R-4.0.5/lib/

peakFile=$1 # File of "bait" peaks(promoters + enhancers +...) to analyze (format: Chromosome <\t> bait-center-position)
tssFile=$2 # File of "prey" TSSs(promoters) to analyze (format: Chromosome <\t> prey-center-position)
conFile=$3  # Contact file based on distiller output excluding the header and first column
outputPath=$4 # Path to output file
CPU=$5
DIST=$6 # Half size of "prey" search window around "bait" position
CAP=$7 # Half size of "bait" and "prey" contact capture window

if [ $# == 7 ]; then
  DIST=$6
  CAP=$7
fi

if [ $# == 6 ]; then
  DIST=$6
  CAP=2000
fi

if [ $# == 5 ]; then
  DIST=1000000
  CAP=2000
fi

if [ $# == 4 ]; then
  CPU=30
  DIST=1000000
  CAP=2000
fi

if [ ! -e $1 ]; then
  echo " peakFile doesn't exist, peakFile = $1"
  exit -1
elseif
fi

if [ ! -e $2 ]; then
  echo " tssFile doesn't exist, tssFile= $2"
  exit -1
fi

if [ ! -e $3 ]; then
  echo " conFile doesn't exist, conFile = $3"
  exit -1
fi

if [ -f $4 ]; then
  echo " outputPath doesn't exist, outputPath=$4 "
  exit -1
fi

echo "peakFile                  $peakFile"
echo "tssFile                   $tssFile"
echo "conFile                   $conFile"
echo "outputPath                $outputPath"
echo "CPU                       $CPU"
echo "locus half length         $DIST"
echo "bait half length          $CAP"

wait_a_second(){
  joblist=($(jobs -p))
    while (( ${#joblist[*]} >= 30 ))
      do
      sleep 1
      joblist=($(jobs -p))
  done
}

date

mkdir -p $outputPath/conFile
mkdir -p $outputPath/baits_by_chrom
mkdir -p $outputPath/preys_by_chrom
mkdir -p $outputPath/preys_in_baits
mkdir -p $outputPath/confile_by_chrom

baits_by_chrom(){
  while read chr center; do
    cat $peakFile |awk -v chr=$chr 'BEGIN {OFS = "\t"} { if ($1 == chr) {print $1, $2}}' > $outputPath/baits_by_chrom/${chr}_baits.bed
done < $peakFile
}

baits_by_chrom

wait

preys_by_chrom(){
  while read chr center; do  
    cat $tssFile |awk -v chr=$chr 'BEGIN {OFS = "\t"} { if ($1 == chr) {print $1, $2}}' > $outputPath/preys_by_chrom/${chr}_preys.bed
done < $tssFile
}

preys_by_chrom

wait

preys_in_baits2(){
  chr=$1
  while read chrom center; do
        cat $outputPath/preys_by_chrom/$1_preys.bed | awk -v c=$center -v e=$DIST 'BEGIN{OFS="\t"} ; {if (((c - e <= $2) && ($2 <= c)) || ((c <= $2) && ($2 <= c + e))) {print $0}}' > $outputPath/preys_in_baits/$1_${center}.bed &
        wait_a_second
  done < $outputPath/baits_by_chrom/${chr}_baits.bed
}

preys_in_baits(){
  while read chr center; do
    if [ ! -e "$outputPath/preys_in_baits/${chr}_${center}.bed" ];then
      preys_in_baits2 $chr
    fi
done < $peakFile
}
preys_in_baits

wait

cat $peakFile | awk -v d=$DIST 'BEGIN{OFS="\t"} {if ($2 >= d) {print NR-1, $1, $2-d, $2+d, $2}; if ($2 < d) {print NR-1, $1, "0",$2+d, $2}}' | awk 'BEGIN{OFS="\t"}{ print $1,$2, $3, $4,$5}' > $outputPath/peakFile_temp1

wait

split_chrom(){
  zcat $conFile | awk -v chr=$1 'BEGIN {OFS = "\t"} { if ($1 == chr) {print $1, $2, $3, $4}; if ( $1 > chr ){ exit;}}' | awk 'BEGIN{OFS="\t"} {if ($2<=$4 && $1==$3) {print $1, $2, $3, $4}; if ($2>$4 && $1==$3) {print $1, $4, $3, $2}}' > $outputPath/confile_by_chrom/$1_confile_temp0.bed
if [ -e "$outputPath/confile_by_chrom/$1_confile_temp0.bed" ];then
  mv $outputPath/confile_by_chrom/$1_confile_temp0.bed $outputPath/confile_by_chrom/$1_confile_temp.bed
else
  touch $outputPath/confile_by_chrom/$1_confile_temp.bed
fi
}


split_peak_region(){
  index=$1 chr=$2 start=$3 end=$4
  nice cat $outputPath/confile_by_chrom/$2_confile_temp.bed | nice -n 19 awk -v s=$3 -v e=$4 -v i=$1 -v f=$outputPath/conFile/temp_${index}.gz 'BEGIN{OFS="\t"} ((s<=$2 && $2<=e) || (s<=$4 && $4<=e))  {print i, $1, $2, $4 | "gzip > "f""}' 
}

python_call_loop(){
  chr=$1 center=$2 index=$3
  python ./Contact_normalization_by_local_decay/ContactCaller_microC.py --peakfile $peakFile --preyfile $outputPath/preys_in_baits/$1_$2.bed --confile $outputPath/conFile/temp_${index}.gz --out $outputPath/$1_$2.txt --dist $DIST --cap $CAP --index $index --chrom $chr --position $center
}
  

call_loop_bg(){
  index=$1 chr=$2 start=$3 end=$4 center=$5
  split_peak_region $index $chr $start $end
  python_call_loop $chr $center $index
}


split_chrom_bg(){
  while read index chr start end center; do
    echo split_chrom_bg $chr
    if [ ! -e "$outputPath/confile_by_chrom/${chr}_confile_temp.bed" ]; then
      split_chrom $chr
    fi
  done < $outputPath/peakFile_temp1
}

split_chrom_bg &

while read index chr start end center; do
    echo $index $chr $start $end $center
    while [ ! -e "$outputPath/confile_by_chrom/${chr}_confile_temp.bed" ]
      do 
      sleep 1
    done
    call_loop_bg $index $chr $start $end $center &
    wait_a_second
done <$outputPath/peakFile_temp1
wait

echo " DONE! "
